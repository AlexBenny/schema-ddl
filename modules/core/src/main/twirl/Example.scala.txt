@(className: String, uri: String, properties: List[com.snowplowanalytics.iglu.schemaddl.bigquery.Field])

package com.snowplowanalytics.snowplow.event;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.util.HashMap;
import java.util.Map;

public class @className extends AbstractSelfDescribing {

    public final static String SCHEMA_@{className.toUpperCase()} = "@uri";

    @for(property <- properties) {
    public final static String PARAM_@{property.name.toUpperCase()} = "@{property.name}";
    }

    @for(property <- properties) {
    /// It's the property for `@{property.name}` JSON key
    public @{property.fieldType.toString()} @{property.name};
    }

    public @{className}(@{properties.map(_.name).mkString(", ")}) {
        @for(property <- properties) {
        this.@{property.name} = @{property.name};
        }
        // Set here further checks about the arguments.
    }

    // Builder methods
    @for(property <- properties) {
    @@NonNull
    public @{className} @{property.name} ( @{property.fieldType.toString()} @{property.name}) {
        this.@{property.name} = @{property.name};
        return this;
    }
    }

    // Tracker methods

    @@Override
    public @@NonNull Map<String, Object> getDataPayload() {
        HashMap<String,Object> payload = new HashMap<>();
        @for(property <- properties) {
        if (@{property.name} != null) {
            payload.put(PARAM_@{property.name.toUpperCase()}, @{property.name});
        }
        }
        return payload;
    }

    @@Override
    public @@NonNull String getSchema() {
        return SCHEMA_@{className.toUpperCase()};
    }
}
